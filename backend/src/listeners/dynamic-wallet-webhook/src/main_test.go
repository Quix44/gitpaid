package main

import (
	"context"
	"testing"
	"time"
)

type AutoGenerated struct {
	EventID         string     `json:"eventId"`
	WebhookID       string     `json:"webhookId"`
	EnvironmentID   string     `json:"environmentId"`
	Data            SocialData `json:"data"`
	EnvironmentName string     `json:"environmentName"`
	MessageID       string     `json:"messageId"`
	EventName       string     `json:"eventName"`
	UserID          string     `json:"userId"`
	Redelivery      bool       `json:"redelivery"`
	Timestamp       time.Time  `json:"timestamp"`
}

const testPayload = `
{
  "eventId": "b9d0dff0-26cc-43c9-8b1c-d782739047c3",
  "webhookId": "7ee12477-55ce-4f32-a99f-5712fc605161",
  "environmentId": "46c4b660-c6c1-462e-817e-1cf4459ac07f",
  "data": {
    "accountDisplayName": "Quix",
    "walletId": null,
    "accountPhotos": [
      "https://avatars.githubusercontent.com/u/96739828?v=4"
    ],
    "accountProfile": {
      "gists_url": "https://api.github.com/users/Quix44/gists{/gist_id}",
      "repos_url": "https://api.github.com/users/Quix44/repos",
      "two_factor_authentication": true,
      "following_url": "https://api.github.com/users/Quix44/following{/other_user}",
      "twitter_username": null,
      "bio": null,
      "created_at": "2021-12-27T16:20:10Z",
      "login": "Quix44",
      "type": "User",
      "blog": "",
      "private_gists": 1,
      "total_private_repos": 19,
      "subscriptions_url": "https://api.github.com/users/Quix44/subscriptions",
      "updated_at": "2024-03-05T15:19:43Z",
      "site_admin": false,
      "disk_usage": 78837,
      "collaborators": 5,
      "company": null,
      "owned_private_repos": 19,
      "id": 96739828,
      "public_repos": 4,
      "gravatar_id": "",
      "plan": {
        "name": "free",
        "collaborators": 0,
        "private_repos": 10000,
        "space": 976562499
      },
      "email": null,
      "organizations_url": "https://api.github.com/users/Quix44/orgs",
      "hireable": null,
      "starred_url": "https://api.github.com/users/Quix44/starred{/owner}{/repo}",
      "followers_url": "https://api.github.com/users/Quix44/followers",
      "public_gists": 0,
      "url": "https://api.github.com/users/Quix44",
      "received_events_url": "https://api.github.com/users/Quix44/received_events",
      "followers": 2,
      "avatar_url": "https://avatars.githubusercontent.com/u/96739828?v=4",
      "events_url": "https://api.github.com/users/Quix44/events{/privacy}",
      "html_url": "https://github.com/Quix44",
      "following": 0,
      "name": "Quix",
      "location": null,
      "node_id": "U_kgDOBcQh9A"
    },
    "accountEmails": [
      "quixcodes@gmail.com"
    ],
    "userId": "11c70fe4-615b-4a6d-8e71-cc42829e1009",
    "accountId": "96739828",
    "createdAt": "2024-03-05T15:28:01.955Z",
    "deletedAt": null,
    "projectEnvironmentId": "46c4b660-c6c1-462e-817e-1cf4459ac07f",
    "userEmailId": null,
    "provider": "github",
    "accountUsername": "Quix44",
    "id": "237eb442-bc50-4b4d-a340-6af1de05e23a",
    "updatedAt": "2024-03-05T15:28:01.955Z"
  },
  "environmentName": "sandbox",
  "messageId": "a254f511-ab4a-41cd-b40b-5ecb79f3b202",
  "eventName": "user.social.linked",
  "userId": "11c70fe4-615b-4a6d-8e71-cc42829e1009",
  "redelivery": true,
  "timestamp": "2024-03-05T15:28:01.963Z"
}
`

type LambdaEvent struct {
	Event string
}

// TestHandleRequest tests the HandleRequest function
func TestHandleRequest(t *testing.T) {
	ctx := context.Background()
	req := WebhookPayload{
		Event: testPayload,
	}

	// Call your function
	resp, err := HandleRequest(ctx, req)

	// Check for errors
	if err != nil {
		t.Errorf("HandleRequest() error = %v", err)
		return
	}

	// Perform your test: check if the response status code is 200
	if resp.StatusCode != 200 {
		t.Errorf("Expected StatusCode=200, got %v", resp.StatusCode)
	}
}

const walletLinkPayload = `{
  "eventId": "02820a6a-fded-4fa6-9a5d-d41b15125f66",
  "webhookId": "7ee12477-55ce-4f32-a99f-5712fc605161",
  "environmentId": "46c4b660-c6c1-462e-817e-1cf4459ac07f",
  "data": {
    "chain": "EVM",
    "lowerPublicKey": "0x3712914845d3ba550ff4c45f2c573ba20f6d3098",
    "publicKey": "0x3712914845d3bA550Ff4C45F2C573bA20f6D3098",
    "userId": "11c70fe4-615b-4a6d-8e71-cc42829e1009",
    "turnkeyHDWalletId": "3917109a-86ed-5a83-a11e-c2a62f9ad415",
    "createdAt": "2024-03-10T14:49:41.810Z",
    "deletedAt": null,
    "provider": "embeddedWallet",
    "name": "turnkeyhd",
    "id": "05373f5f-e315-4c5c-baa3-ae887bbeea2c",
    "hardwareWallet": null,
    "signerWalletId": null,
    "updatedAt": "2024-03-10T14:49:41.810Z"
  },
  "environmentName": "sandbox",
  "messageId": "ddc1b399-22cd-45cd-94d6-3c987a5dcf7f",
  "eventName": "wallet.linked",
  "userId": "11c70fe4-615b-4a6d-8e71-cc42829e1009",
  "redelivery": true,
  "timestamp": "2024-03-10T14:49:41.820Z"
}`

func TestHandleRequestWithWalletLink(t *testing.T) {
	ctx := context.Background()
	req := WebhookPayload{
		Event: walletLinkPayload,
	}

	// Call your function
	resp, err := HandleRequest(ctx, req)

	// Check for errors
	if err != nil {
		t.Errorf("HandleRequest() error = %v", err)
		return
	}

	// Perform your test: check if the response status code is 200
	if resp.StatusCode != 200 {
		t.Errorf("Expected StatusCode=200, got %v", resp.StatusCode)
	}
}
